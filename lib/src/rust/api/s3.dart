// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.21.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../process/transfer.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<void> initS3Client(
        {required String endpoint,
        required String bucketname,
        required String accessKey,
        required String sessionKey,
        String? sessionToken,
        required String region,
        dynamic hint}) =>
    RustLib.instance.api.initS3Client(
        endpoint: endpoint,
        bucketname: bucketname,
        accessKey: accessKey,
        sessionKey: sessionKey,
        sessionToken: sessionToken,
        region: region,
        hint: hint);

/// TODO return sth.
Future<void> uploadToS3(
        {required String p, required String obj, dynamic hint}) =>
    RustLib.instance.api.uploadToS3(p: p, obj: obj, hint: hint);

/// TODO return sth.
Future<void> uploadToS3WithConfig(
        {required String endpoint,
        required String bucketname,
        required String accessKey,
        required String sessionKey,
        String? sessionToken,
        required String region,
        required String p,
        required String obj,
        dynamic hint}) =>
    RustLib.instance.api.uploadToS3WithConfig(
        endpoint: endpoint,
        bucketname: bucketname,
        accessKey: accessKey,
        sessionKey: sessionKey,
        sessionToken: sessionToken,
        region: region,
        p: p,
        obj: obj,
        hint: hint);

/// TODO return sth.
/// FIX DONT USE `S3CLIENT`
Future<void> downloadFromS3(
        {required String p, required String obj, dynamic hint}) =>
    RustLib.instance.api.downloadFromS3(p: p, obj: obj, hint: hint);

Future<String?> generatePregisnUrl(
        {required String endpoint,
        required String bucketname,
        required String accessKey,
        required String sessionKey,
        String? sessionToken,
        required String region,
        required String obj,
        dynamic hint}) =>
    RustLib.instance.api.generatePregisnUrl(
        endpoint: endpoint,
        bucketname: bucketname,
        accessKey: accessKey,
        sessionKey: sessionKey,
        sessionToken: sessionToken,
        region: region,
        obj: obj,
        hint: hint);

Future<bool> checkAccountAvailable(
        {required String endpoint,
        required String bucketname,
        required String accessKey,
        required String sessionKey,
        String? sessionToken,
        required String region,
        dynamic hint}) =>
    RustLib.instance.api.checkAccountAvailable(
        endpoint: endpoint,
        bucketname: bucketname,
        accessKey: accessKey,
        sessionKey: sessionKey,
        sessionToken: sessionToken,
        region: region,
        hint: hint);

Future<List<Entry>> listObjects(
        {required String endpoint,
        required String bucketname,
        required String accessKey,
        required String sessionKey,
        String? sessionToken,
        required String region,
        required String path,
        required bool useGlobal,
        dynamic hint}) =>
    RustLib.instance.api.listObjects(
        endpoint: endpoint,
        bucketname: bucketname,
        accessKey: accessKey,
        sessionKey: sessionKey,
        sessionToken: sessionToken,
        region: region,
        path: path,
        useGlobal: useGlobal,
        hint: hint);
