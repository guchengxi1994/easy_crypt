// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.21.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../process/encrypt.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

String greet({required String name, dynamic hint}) =>
    RustLib.instance.api.greet(name: name, hint: hint);

Future<void> testEncrypt({dynamic hint}) =>
    RustLib.instance.api.testEncrypt(hint: hint);

Stream<String> nativeMessageStream({dynamic hint}) =>
    RustLib.instance.api.nativeMessageStream(hint: hint);

Future<String> defaultKey({dynamic hint}) =>
    RustLib.instance.api.defaultKey(hint: hint);

Future<String> randomKey({dynamic hint}) =>
    RustLib.instance.api.randomKey(hint: hint);

Future<String> encrypt(
        {required String saveDir,
        required List<EncryptItem> files,
        required String key,
        dynamic hint}) =>
    RustLib.instance.api
        .encrypt(saveDir: saveDir, files: files, key: key, hint: hint);

Future<String> decrypt(
        {required String saveDir,
        required String path,
        required String key,
        String? fileType,
        dynamic hint}) =>
    RustLib.instance.api.decrypt(
        saveDir: saveDir, path: path, key: key, fileType: fileType, hint: hint);

Future<String> compress(
        {required List<String> paths, required String saveDir, dynamic hint}) =>
    RustLib.instance.api.compress(paths: paths, saveDir: saveDir, hint: hint);

Future<List<String>> flowPreview(
        {required List<String> operators, dynamic hint}) =>
    RustLib.instance.api.flowPreview(operators: operators, hint: hint);

Future<void> initS3Client(
        {required String endpoint,
        required String bucketname,
        required String accessKey,
        required String sessionKey,
        String? sessionToken,
        required String region,
        dynamic hint}) =>
    RustLib.instance.api.initS3Client(
        endpoint: endpoint,
        bucketname: bucketname,
        accessKey: accessKey,
        sessionKey: sessionKey,
        sessionToken: sessionToken,
        region: region,
        hint: hint);

/// TODO return sth.
Future<void> uploadToS3(
        {required String p, required String obj, dynamic hint}) =>
    RustLib.instance.api.uploadToS3(p: p, obj: obj, hint: hint);

/// TODO return sth.
Future<void> uploadToS3WithConfig(
        {required String endpoint,
        required String bucketname,
        required String accessKey,
        required String sessionKey,
        String? sessionToken,
        required String region,
        required String p,
        required String obj,
        dynamic hint}) =>
    RustLib.instance.api.uploadToS3WithConfig(
        endpoint: endpoint,
        bucketname: bucketname,
        accessKey: accessKey,
        sessionKey: sessionKey,
        sessionToken: sessionToken,
        region: region,
        p: p,
        obj: obj,
        hint: hint);

/// TODO return sth.
Future<void> downloadFromS3(
        {required String p, required String obj, dynamic hint}) =>
    RustLib.instance.api.downloadFromS3(p: p, obj: obj, hint: hint);

Future<String?> generatePregisnUrl(
        {required String endpoint,
        required String bucketname,
        required String accessKey,
        required String sessionKey,
        String? sessionToken,
        required String region,
        required String obj,
        dynamic hint}) =>
    RustLib.instance.api.generatePregisnUrl(
        endpoint: endpoint,
        bucketname: bucketname,
        accessKey: accessKey,
        sessionKey: sessionKey,
        sessionToken: sessionToken,
        region: region,
        obj: obj,
        hint: hint);
