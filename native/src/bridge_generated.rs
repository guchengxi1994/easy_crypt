#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::process::encrypt::EncryptItem;

// Section: wire functions

fn wire_test_encrypt_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "test_encrypt",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(test_encrypt()),
    )
}
fn wire_native_message_stream_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "native_message_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| native_message_stream(task_callback.stream_sink::<_, String>())
        },
    )
}
fn wire_default_key_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "default_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(default_key()),
    )
}
fn wire_random_key_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "random_key",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(random_key()),
    )
}
fn wire_encrypt_impl(
    port_: MessagePort,
    save_dir: impl Wire2Api<String> + UnwindSafe,
    files: impl Wire2Api<Vec<EncryptItem>> + UnwindSafe,
    key: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "encrypt",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_save_dir = save_dir.wire2api();
            let api_files = files.wire2api();
            let api_key = key.wire2api();
            move |task_callback| Result::<_, ()>::Ok(encrypt(api_save_dir, api_files, api_key))
        },
    )
}
fn wire_compress_impl(
    port_: MessagePort,
    paths: impl Wire2Api<Vec<String>> + UnwindSafe,
    save_dir: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "compress",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_paths = paths.wire2api();
            let api_save_dir = save_dir.wire2api();
            move |task_callback| Result::<_, ()>::Ok(compress(api_paths, api_save_dir))
        },
    )
}
fn wire_flow_preview_impl(port_: MessagePort, operators: impl Wire2Api<Vec<String>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<String>, _>(
        WrapInfo {
            debug_name: "flow_preview",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_operators = operators.wire2api();
            move |task_callback| Result::<_, ()>::Ok(flow_preview(api_operators))
        },
    )
}
fn wire_init_s3_client_impl(
    port_: MessagePort,
    endpoint: impl Wire2Api<String> + UnwindSafe,
    bucketname: impl Wire2Api<String> + UnwindSafe,
    access_key: impl Wire2Api<String> + UnwindSafe,
    session_key: impl Wire2Api<String> + UnwindSafe,
    session_token: impl Wire2Api<Option<String>> + UnwindSafe,
    region: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "init_s3_client",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_endpoint = endpoint.wire2api();
            let api_bucketname = bucketname.wire2api();
            let api_access_key = access_key.wire2api();
            let api_session_key = session_key.wire2api();
            let api_session_token = session_token.wire2api();
            let api_region = region.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(init_s3_client(
                    api_endpoint,
                    api_bucketname,
                    api_access_key,
                    api_session_key,
                    api_session_token,
                    api_region,
                ))
            }
        },
    )
}
fn wire_upload_to_s3_impl(
    port_: MessagePort,
    p: impl Wire2Api<String> + UnwindSafe,
    obj: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "upload_to_s3",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_p = p.wire2api();
            let api_obj = obj.wire2api();
            move |task_callback| Result::<_, ()>::Ok(upload_to_s3(api_p, api_obj))
        },
    )
}
fn wire_upload_to_s3_with_config_impl(
    port_: MessagePort,
    endpoint: impl Wire2Api<String> + UnwindSafe,
    bucketname: impl Wire2Api<String> + UnwindSafe,
    access_key: impl Wire2Api<String> + UnwindSafe,
    session_key: impl Wire2Api<String> + UnwindSafe,
    session_token: impl Wire2Api<Option<String>> + UnwindSafe,
    region: impl Wire2Api<String> + UnwindSafe,
    p: impl Wire2Api<String> + UnwindSafe,
    obj: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "upload_to_s3_with_config",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_endpoint = endpoint.wire2api();
            let api_bucketname = bucketname.wire2api();
            let api_access_key = access_key.wire2api();
            let api_session_key = session_key.wire2api();
            let api_session_token = session_token.wire2api();
            let api_region = region.wire2api();
            let api_p = p.wire2api();
            let api_obj = obj.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(upload_to_s3_with_config(
                    api_endpoint,
                    api_bucketname,
                    api_access_key,
                    api_session_key,
                    api_session_token,
                    api_region,
                    api_p,
                    api_obj,
                ))
            }
        },
    )
}
fn wire_download_from_s3_impl(
    port_: MessagePort,
    p: impl Wire2Api<String> + UnwindSafe,
    obj: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "download_from_s3",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_p = p.wire2api();
            let api_obj = obj.wire2api();
            move |task_callback| Result::<_, ()>::Ok(download_from_s3(api_p, api_obj))
        },
    )
}
fn wire_generate_pregisn_url_impl(
    port_: MessagePort,
    endpoint: impl Wire2Api<String> + UnwindSafe,
    bucketname: impl Wire2Api<String> + UnwindSafe,
    access_key: impl Wire2Api<String> + UnwindSafe,
    session_key: impl Wire2Api<String> + UnwindSafe,
    session_token: impl Wire2Api<Option<String>> + UnwindSafe,
    region: impl Wire2Api<String> + UnwindSafe,
    obj: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<String>, _>(
        WrapInfo {
            debug_name: "generate_pregisn_url",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_endpoint = endpoint.wire2api();
            let api_bucketname = bucketname.wire2api();
            let api_access_key = access_key.wire2api();
            let api_session_key = session_key.wire2api();
            let api_session_token = session_token.wire2api();
            let api_region = region.wire2api();
            let api_obj = obj.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(generate_pregisn_url(
                    api_endpoint,
                    api_bucketname,
                    api_access_key,
                    api_session_key,
                    api_session_token,
                    api_region,
                    api_obj,
                ))
            }
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "bridge_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use self::web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use self::io::*;
